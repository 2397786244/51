C51 COMPILER V9.54   CLOCK                                                                 04/11/2022 23:18:45 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE CLOCK
OBJECT MODULE PLACED IN .\Objects\clock.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE clock.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\clock
                    -.lst) OBJECT(.\Objects\clock.obj)

line level    source

   1          #include <reg52.h>
   2          #include <stdio.h>
   3          #include <intrins.h> //nop函数原型
   4          //DS1302写寄存器 起始地址
   5          #define REG_W_START 0x80
   6          //DS1302 读寄存器 起始地址
   7          #define REG_R_START 0x81
   8          
   9          /*
  10          使用LCD1602显示当前的时间
  11          按下按键S2，显示当前的年月日信息(星期）。
  12          使用ds1302 RAM储存信息。
  13          按下S3，发送时间到串口。
  14          温度显示
  15          */
  16          
  17          //DS1302三个引脚使用P1.0 1.1 1.2，用杜邦线提前连接
  18          sbit SCLK = P1^0;
  19          sbit IO = P1^1;
  20          sbit CS = P1^2;
  21          
  22          //LCD 1602 引脚
  23          sbit LCDEN = P3^4;
  24          sbit RS = P3^5; //数据，命令选择
  25          sbit RW = P3^6; //数据读写。
  26          
  27          //按键
  28          sbit S2 = P3^0;
  29          sbit S4 = P3^2;
  30          
  31          //DS18B20 数据传输口 1-wire
  32          sbit DIO = P2^2;
  33          
  34          typedef unsigned char uchar;
  35          typedef unsigned int uint;
  36          
  37          //LCD1602 函数部分 命令发送，数据发送，指针位置设置，显示屏初始化
  38          uchar TIME_AR[7] = {
  39          20,50,5,14,7,1,22
  40          };
  41          
  42          //设置LCD显示状态,分别为时间，日历，温度显示。
  43          enum STATES {CLOCK,Y_M_D,TEMPTURE};
  44          static enum STATES S = CLOCK;
  45          
  46          void sendTimeToSeries();
  47          //延时函数
  48          void delay(uchar time){
  49   1              uint i,j;
  50   1              for(i = 0;i<114;i++){
  51   2                      for(j = 0;j < time;j++);
  52   2              }
  53   1      }
  54          
C51 COMPILER V9.54   CLOCK                                                                 04/11/2022 23:18:45 PAGE 2   

  55          //延时， 约11毫秒
  56          void delay_us(uchar time)
  57          {
  58   1              while(time--);
  59   1      }
  60          
  61          //判断是否空闲
  62          void readStates(){
  63   1              uchar flag = 0;
  64   1              P0 = 0xff; //把P0寄存器（即D0-D7）拉高。
  65   1              RS = 0;  //指令选择
  66   1              RW = 1;  //读选择
  67   1              do{
  68   2                      LCDEN = 1;  //使能
  69   2                      flag = P0;  //把数据口赋值给flag，判断flag第八位(D7)是否为0，为0则空闲退出循环。
  70   2                      LCDEN = 0;
  71   2              }while(flag & 0x80);
  72   1      }
  73          
  74          //发送命令
  75          void SendCmd(uchar cmd){
  76   1               //每次发出指令前判断器件是否空闲
  77   1              readStates();
  78   1              RS = 0;
  79   1              RW = 0;
  80   1              P0 = cmd;
  81   1              LCDEN = 1;
  82   1              LCDEN = 0;//指令发送完之后拉低。两次使能信号改变语句之间间隔在时序规定的最大值之内
  83   1      }
  84          
  85          //数据发送
  86          void SendData(uchar dat){
  87   1              readStates();
  88   1              RS = 1;  //选择数据
  89   1              RW = 0;  //写
  90   1              P0 = dat; 
  91   1              LCDEN = 1;
  92   1              LCDEN = 0;//使能保持150ns
  93   1      }
  94          
  95          //指针位置的设置，调用发送命令函数
  96          int setPointer(uchar x,uchar y){
  97   1              switch(x){
  98   2                      case 1: SendCmd(0x80 | y);break;
  99   2                      case 2: SendCmd(0x80 | 0x40 | y);break;
 100   2              }
 101   1              return 1;
 102   1      }
 103          
 104          //显示屏初始化
 105          void lcdInit(){
 106   1              SendCmd(0x38);
 107   1              SendCmd(0x0c); 
 108   1              SendCmd(0x01); //清屏
 109   1              SendCmd(0x06); //输入一个之后指针往后移动。
 110   1      }
 111          
 112          //发送字符串到显示屏。调用SendData函数
 113          void SendString(uchar * str){
 114   1              while(*str != '\0'){
 115   2                      SendData(*str++);
 116   2              }
C51 COMPILER V9.54   CLOCK                                                                 04/11/2022 23:18:45 PAGE 3   

 117   1      }
 118          
 119          //DS1302部分 器件初始化，时间获取
 120          
 121          //写入一字节
 122          void ds1302SendByte(uchar dat){
 123   1              uint i;
 124   1              for(i = 0;i<8;i++){
 125   2                      SCLK = 0;
 126   2                      IO = dat & 0x01;
 127   2                      SCLK = 1;
 128   2                      dat >>= 1;
 129   2              }
 130   1      }
 131          
 132          //读一字节
 133          uchar ds1302ReadByte(){
 134   1              uint i;
 135   1              uchar dat;
 136   1              SCLK = 1;
 137   1              for(i = 0;i<8;i++){
 138   2                      SCLK = 0;
 139   2                      dat >>= 1;              
 140   2                      if(IO){
 141   3                              dat |= 0x80;
 142   3                      }
 143   2                      SCLK = 1;       
 144   2              }
 145   1              return dat;
 146   1      }
 147          
 148          //发送数据 DS1302发送数据，先发送命令，再发送数据
 149          void DS1302Send(uchar cmd,uchar dat){
 150   1              CS = 0;
 151   1              SCLK = 0;
 152   1              CS = 1;
 153   1              ds1302SendByte(cmd);
 154   1              ds1302SendByte(dat);
 155   1              SCLK = 1; //拉高时钟线
 156   1              CS = 0;
 157   1      }
 158          
 159          //BCD转换为十进制码
 160          uchar bcd2d(uchar bcd){
 161   1              uchar c1,c2;
 162   1              c1 = bcd / 16;
 163   1              c2 = bcd % 16;
 164   1              return c1 * 10 + c2;
 165   1      }
 166          
 167          //十进制转换为BCD
 168          uchar d2bcd(uchar d){
 169   1              uchar c1,c2;
 170   1              c1 = d / 10;
 171   1              c2 = d % 10;
 172   1              return c1 * 16 + c2; 
 173   1      }
 174          
 175          //读取数据 ,DS1302读取数据，先发送命令，再读取数据
 176          uchar DS1302Read(uchar cmd){
 177   1              uchar dat;
 178   1              CS = 0;
C51 COMPILER V9.54   CLOCK                                                                 04/11/2022 23:18:45 PAGE 4   

 179   1              SCLK = 0;
 180   1              CS = 1;
 181   1              ds1302SendByte(cmd);
 182   1              dat = ds1302ReadByte();
 183   1              SCLK = 1;
 184   1              CS = 0;
 185   1              return dat;
 186   1      }
 187          
 188          //DS1302写保护,寄存器位于0x8e
 189          //设置写保护，1打开。
 190          void writeOpen(uchar flag){
 191   1              DS1302Send(0x8e,flag);
 192   1      }
 193          
 194          //器件初始化。设置日历的初始值。
 195          void DS1302Init(){
 196   1              uint i;
 197   1              uchar start_addr = REG_W_START;
 198   1              writeOpen(0);
 199   1              for(i = 0;i<7;i++)
 200   1              {
 201   2                      DS1302Send(start_addr,d2bcd(TIME_AR[i]));
 202   2                      start_addr+=2;
 203   2              }
 204   1              writeOpen(1);
 205   1      }
 206          
 207          //寄存器时间读取,结果储存在数组TIME_AR中。
 208          void timeGetAndStore()
 209          {
 210   1              uint i;
 211   1              uchar start_addr = REG_R_START;
 212   1              for(i = 0;i<7;i++){
 213   2                      TIME_AR[i] = bcd2d(DS1302Read(start_addr));
 214   2                      start_addr+=2;
 215   2              }
 216   1      }
 217          
 218          void numberSend(uchar dat){
 219   1              uchar c1 = dat / 10;
 220   1              uchar c2 = dat % 10;
 221   1              SendData(c1 + '0');
 222   1              SendData(c2 + '0');
 223   1      }
 224          //让时间显示在LCD上，显示小时，分钟，秒
 225          void timeDisplay_HMS(){
 226   1              //读取TIME_AR0-2并显示 
 227   1              uchar TIME_MSG_LINE1[16] = "CURRENT TIME:";
 228   1              timeGetAndStore();
 229   1              setPointer(1,0);
 230   1              SendString(TIME_MSG_LINE1);
 231   1              setPointer(2,0);
 232   1              SendString("TIME:");
 233   1              numberSend(TIME_AR[2]);
 234   1              SendData(':');
 235   1              numberSend(TIME_AR[1]);
 236   1              SendData(':');
 237   1              numberSend(TIME_AR[0]);
 238   1              SendData(' ');
 239   1      }
 240          
C51 COMPILER V9.54   CLOCK                                                                 04/11/2022 23:18:45 PAGE 5   

 241          //时间显示，年，月，日，周
 242          void timeDisplay_YMD(){
 243   1              uchar TIME_MSG_LINE1[16];
 244   1              timeGetAndStore();
 245   1              sprintf(TIME_MSG_LINE1,"EASY CALENDAR");
 246   1              setPointer(1,0);
 247   1              SendString(TIME_MSG_LINE1);
 248   1              setPointer(2,0);
 249   1              SendString("TIME:");
 250   1              numberSend(TIME_AR[6]);
 251   1              SendData('-');
 252   1              numberSend(TIME_AR[4]);
 253   1              SendData('-');
 254   1              numberSend(TIME_AR[3]);
 255   1              SendData(' ');
 256   1      }
 257          
 258          
 259          //温度传感器 DS18B20 部分
 260          //每次对器件操作的时候都要初始化。
 261          bit DS18B20Init()
 262          {
 263   1              bit flag;
 264   1              DIO = 1;
 265   1              _nop_();
 266   1              DIO = 0;
 267   1              delay_us(80); //保持480us以上。
 268   1              DIO = 1;
 269   1              delay_us(10); //延时 15 -60us
 270   1              flag = DIO;
 271   1              delay_us(20); //读取器件发送的信号（低电平表示存在）之后，保持60-240us。
 272   1              DIO = 1; //释放总线
 273   1              return flag;    
 274   1      }
 275          
 276          //往器件发送一字节数据
 277          void DS18B20SendByte(uchar dat){
 278   1              uint i;
 279   1              for(i = 0;i<8;i++){
 280   2                      DIO = 1;
 281   2                      DIO = 0;
 282   2                      _nop_(); //产生写时序，将总线拉低至少1us。
 283   2                      DIO = dat & 0x01;
 284   2                      delay_us(15);
 285   2                      dat >>= 1; 
 286   2                      _nop_(); //两个写时序之间至少间隔1us。
 287   2              }
 288   1              DIO = 1;
 289   1      }
 290          
 291          //产生一个读时序。
 292          uchar DS18B20ReadByte(){
 293   1              uint i,j;
 294   1              uchar dat;
 295   1              //产生读时序，将总线拉低
 296   1              for(i = 0;i<8;i++){
 297   2                      DIO = 1;
 298   2                      DIO = 0;
 299   2                      _nop_(); //拉低总线至少1us
 300   2                      DIO = 1;
 301   2                      _nop_();//释放总线
 302   2                      j= DIO;
C51 COMPILER V9.54   CLOCK                                                                 04/11/2022 23:18:45 PAGE 6   

 303   2                      delay_us(10); //读时序保持60us以上。
 304   2                      dat = (j << 7) | (dat >> 1);
 305   2                      _nop_(); //两个读时序之间间隔1us。
 306   2              }
 307   1              DIO = 1;
 308   1              /*
 309   1              uchar i, j, dat;
 310   1              for(i=0;i<8;i++)
 311   1              {
 312   1                      DIO = 0;
 313   1                      _nop_();//产生读时序
 314   1                      DIO = 1;
 315   1                      _nop_();//释放总线
 316   1                      j = DIO;
 317   1                      delay_us(10);//76.95us
 318   1                      DIO = 1;
 319   1                      _nop_();
 320   1                      dat = (j<<7)|(dat>>1);  
 321   1              }*/
 322   1              return dat;
 323   1      }
 324          
 325          void temptureDisplay(){
 326   1              uchar H_BYTE;
 327   1              uchar L_BYTE;
 328   1              uint TEMP;
 329   1              //每次显示温度，先初始化，再发送跳过ROM指令（针对单器件的情况），再发送
 330   1              //温度转换指令。第二次执行重复操作，发送读取温度寄存器的指令。
 331   1              DS18B20Init();
 332   1              DS18B20SendByte(0xcc); //忽略ROM
 333   1              DS18B20SendByte(0x44); //温度转换，结果储存在Byte0-1 寄存器中。
 334   1              DS18B20Init();
 335   1              DS18B20SendByte(0xcc);
 336   1              DS18B20SendByte(0xbe); // 温度读取
 337   1              L_BYTE = DS18B20ReadByte();
 338   1              H_BYTE = DS18B20ReadByte();
 339   1              TEMP = H_BYTE;
 340   1              TEMP <<= 8;
 341   1              TEMP |= L_BYTE;
 342   1              TEMP = TEMP * 0.0625 * 10 + 0.5; //四舍五入，
 343   1              //温度显示保留一位小数。显示在LCD右下角。
 344   1              setPointer(1,0);
 345   1              SendString("TODAY ROOM TEMP");
 346   1              setPointer(2,0);
 347   1              //发送TEMP每一位上的数字
 348   1              SendData(TEMP / 100 + '0');
 349   1              SendData(TEMP / 10 % 10 + '0');
 350   1              SendData('.');
 351   1              SendData(TEMP % 10 + '0');
 352   1              SendData(0xdf);
 353   1              SendData('C');
 354   1              SendData(' ');
 355   1              if(TEMP > 280){
 356   2                      SendString("HOT!");
 357   2              }
 358   1              else if(TEMP > 120){
 359   2                      SendString("COOL!");
 360   2              }
 361   1              else if(TEMP > 10){
 362   2                      SendString("COLD!");
 363   2              }
 364   1              SendData(' ');
C51 COMPILER V9.54   CLOCK                                                                 04/11/2022 23:18:45 PAGE 7   

 365   1      }
 366          
 367          //按键部分。S2用于切换两种显示，S3记录时间。
 368          void statesAlter(){
 369   1              if(!S2){
 370   2                      delay(10);
 371   2                      if(!S2){
 372   3                              switch(S){
 373   4                                      case CLOCK:S = Y_M_D;break;
 374   4                                      case Y_M_D:S = TEMPTURE;break;
 375   4                                      case TEMPTURE: S = CLOCK;break;
 376   4                              }
 377   3                      
 378   3                      }
 379   2                      while(!S2); //松手检测
 380   2              }
 381   1              if(!S4){
 382   2                      delay(10);
 383   2                      if(!S4)
 384   2                      {
 385   3                              sendTimeToSeries();
 386   3                              while(!S4);
 387   3                      }
 388   2              }
 389   1              
 390   1      }
 391          
 392          void timerInit(){
 393   1              EA = 1;
 394   1              TMOD = 0x20;
 395   1              TH1 = 0xfd;
 396   1              TL1 = 0xfd; //波特率9600
 397   1              SM0 = 0;
 398   1              SM1 = 1; //串口选择工作模式
 399   1              ET1 = 0;
 400   1              TR1 = 1; //定时器1工作。
 401   1      }
 402          
 403          void sendTimeToSeries()
 404          {
 405   1              uint i; 
 406   1              //按下S4(P3^2IO口)，把当前时间发送到串口。
 407   1              //注意串口通信使用P3.0 3.1口，使用按键和UART不要在同一个IO口上。
 408   1              for(i = 0;i<7;i++)
 409   1              {
 410   2                      SBUF = TIME_AR[i];
 411   2                      while(!TI);
 412   2                      TI = 0;
 413   2              }
 414   1      }
 415          
 416          void main()
 417          {
 418   1              uint cnt = 0;
 419   1              lcdInit();
 420   1              DS1302Init();
 421   1              timerInit();
 422   1              writeOpen(0);
 423   1              while(1){
 424   2                      cnt++;
 425   2                      if(cnt >= 3000)
 426   2                      {
C51 COMPILER V9.54   CLOCK                                                                 04/11/2022 23:18:45 PAGE 8   

 427   3                              
 428   3                              writeOpen(0);
 429   3                              switch(S)
 430   3                              {
 431   4                                      case CLOCK: timeDisplay_HMS();break;
 432   4                                      case Y_M_D: timeDisplay_YMD();break;
 433   4                                      case TEMPTURE: temptureDisplay();break;
 434   4                              }
 435   3                              cnt = 0;
 436   3                              writeOpen(1);
 437   3                      }
 438   2                      statesAlter(); //判断按钮按下 状态切换  
 439   2              }
 440   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1107    ----
   CONSTANT SIZE    =     69    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      39
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
